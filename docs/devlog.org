* Sporadic Dev Log

** 2023-12-27
- Working on
  + Generic Entity
    * Animated Sprite
    * Based on Tilesheets
      - Player Spritesheet WORKING
	* Sprites: 48x48
	* Idle Down 6
	* Idle Right 6
	* Idle Up 6
	* Walk Down 6
	* Walk Right 6
	* Walk Up 6
	* Attack Down 4
	* Attack Right 4
	* Attack Up 4
	* Die 3

** 2023-12-28
- Working on
  + Map
    * Options
      - Tiles
	* Can be procedurally generated or pre-made
	* Can make use of mwoods sprites or can find or make new ones
      - Large Sprite
	* Must be pre-made
	* Can fit the map to the narrative or vice versa
	* Control over progress
      - Procedurally Generated
	* Can use RogulikeDev resources
	* Basically a tile map
	* No real control over what will be created
  + Plot
    * Player is a crafter of golems
    * Can perform some tasks
      - Gather Materials
      - Explore Map
      - Craft Golems
      - Assign Golems to Tasks
    * Cozy Idle Game
    * Gather resources
    * Build more stuff
    * Reset for advantages
    * No combat

** 2023-12-29
Plot didn't impact the Generic Entity yet
Need to work on the game map

** 2023-12-30
Stepping back from the map again
Might be worthwhile to look into movement a little more
Instead of keyboard movement, mouse movement might make sense
So lets look into that

** 2023-12-31
Added some other entities to the screen and adjusted animations
to handle different animation lenghts

** 2024-01-01
Going to just do a branch per day at the moment instead of per topic
I do poorly at the branch per topic process

1. I need a map to put obstacles on
   1. A big grid is easy to implement
   2. Alternatively, obstacles can exist on the same gridless plane as
      entities.   A map could be a large background image and a list
      of obstacles.  
2. Map will implement A* from any arbitrary pixel coordinates to any
   arbitrary pizel coordinates.
   1. This means the map will need to know the starting point, size,
      and anchor for the moving entity and each possible obstacle
3. Obstacles on map stop movement
   1. Since entities move towards a target, and move until they reach
      that target, this is causing an issue.
   2. When an object is encountered we need to do a few things
      1. Stop moving.
	 * Set the target_x and target_y to the position reached just
	   before colliding with the object
      2. Check for what we collided with
	 * Some obstacles may need special handling
	 * Damage
	 * Activate special features
	 * AI reactions
	 * Trigger game effects


** 2024-01-02
For some reason altering the collision code to stop all movement
doesn't seem to work.
Revisited how I was handling collisions. Similarly named variables
are a problem.  @dx != dx

** 2024-01-03
Not quite sure what to work on next
1. pathfinding
2. map drawing
3. enemy collision
4. entity cleanup

** 2024-01-04
Tonight we will look through the entity and do some cleanup
1. Do all entities move?
2. Do all entities have animations?
3. What is an Entity?
   1. Has a position in space
   2. Has a sprite representation
   3. Has some impact on the game
4. What is an obstacle?
   1. Has a position in space
   2. May be represented by 1 or more sprites
   3. Is the game world's self representation
Entity cleanup
  1. Split animation off of the main Tick
  2. Think about how to generalize the base entity
     from the animated entity

** 2024-01-05
There are animated and non animated entities
There are mobile and immobile entities
There are entities can can attack
There are entities that can hold things
There are entities that can spawn other entities
There are entities that represent non-entities
  + Consumables
  + Equippables
  + Treasure
  + Triggers
Everything else is probably an Obstacle

** 2024-01-06
Stripped out some naming, made sure to reference the
creator of the sprites I'm using currently as well.

** 2024-01-07
Need to fix all the whitespace around the sprites.

** 2024-01-08
A sprite sheet has some Rows
A Row has some Columns
Each Sprite (Row, Column) has some padding
The drawn sprite is at location Row*H + padding_Y, Col*W+padding_X
Player padding is 16w, 1h
Drawn width = W - (2*padding_x)
Drawn height = H - (2*padding_y)
Need
Sprite_Width
Sprite_Height
Padding_X
Padding_Y

** 2024-01-09
Implemented some of the padding stuff.
Need a lot more flexibility there.

** 2024-01-10
No progress to report
